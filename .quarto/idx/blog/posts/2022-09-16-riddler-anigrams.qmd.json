{"title":"Riddler: Anigrams","markdown":{"yaml":{"title":"Riddler: Anigrams","date":"2022-09-16","description":"A probability puzzle involving rare letter permutations.","author":"Mark Girard","categories":["riddler","puzzles"],"format":"html"},"headingText":"The Problem","containsRefs":false,"markdown":"\n\n\nMy solution to [this week's riddler](https://fivethirtyeight.com/features/can-you-build-the-biggest-anigram/). (See more of [my Riddler solutions here](/riddlers).)\n\nFrom Michael Branicky comes a word puzzle that is the G.O.A.T.:\n\n> If you like [Wordle](https://www.nytimes.com/games/wordle/index.html), then you might also enjoy [Anigrams](https://anigrams.us/), a game created by Friend-of-the-Riddler™ Adam Wagner.\n>\n>In the game of Anigrams, you unscramble successively larger, nested collections of letters to create a valid “chain” of six English words between four and nine letters in length.\n>\n>For example, a chain of five words (sadly, less than the six needed for a valid game of Anigrams) can be constructed using the following sequence, with each term after the first including one additional letter than the previous term:\n>\n>-   DEIR (which unscrambles to make the words DIRE, IRED or RIDE)\n>-   DEIRD (DRIED or REDID)\n>-   DEIRDL (DIRLED, DREIDL or RIDDLE)\n>-   DEIRDLR (RIDDLER)\n>-   DEIRDLRS (RIDDLERS)\n>\n>What is the longest chain of such nested anagrams you can create, starting with four letters?\n>\n>For specificity, all valid words must come from Peter Norvig’s [word list](https://norvig.com/ngrams/enable1.txt) (a list we’ve used [previously](https://fivethirtyeight.com/features/can-you-solve-the-vexing-vexillology/) here at The Riddler).\n>\n>_Extra credit:_ How many possible games of Anigrams games are there? That is, how many valid sets are there of four initial letters, and then five more letters added one at a time in an ordered sequence, that result in a sequence of valid anagrams? (Note: Swapping the order of the first four letters does not result in a distinct game.)\n\n## The Solution\nIt turns out that the longest such chain of anagrams has length 13. While there are numerous such chains, one possible chain of length 13 is given by:\n\n- aeno\n- aenos\n- aenost\n- aeinost\n- aeimnost\n- aeimnnost\n- aeiimnnost\n- aeiimnnorst\n- aeiimnnorstt\n- adeiimnnorstt\n- adeeiimnnorstt\n- adeeiiimnnorstt\n- adeeiiimnnnorstt\n\nWith one possible solution being:\n\n- aeon\n- aeons\n- atones\n- atonies\n- amniotes\n- nominates\n- antimonies\n- inseminator\n- terminations\n- antimodernist\n- determinations\n- intermediations\n- indeterminations\n\n(Interstingly, every anigram chain of lenth 13 ends in the same 6 words: inseminator, terminations, antimodernist, determinations, intermediations, indeterminations.)\n\n### Extra credit:\n\nAssuming a valid anigram game starts with 4 letters and ends with 10 letters, there are 8,660,949 distinct anigram games.\n\nI wrote up some code to compute my answer which you can see below:\n\n```python\nfrom urllib.request import urlopen\nfrom collections import defaultdict\nfrom functools import lru_cache\n\n\nurl = \"https://norvig.com/ngrams/enable1.txt\"\nfile = urlopen(url)\nwords = [line.decode(\"utf-8\").strip() for line in file]\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef main():\n    anagrams = defaultdict(list)\n    for word in words:\n        # Ignore words of length less than 4\n        # (short words are not used in this problem)\n        if len(word) >= 4:\n            anagrams[''.join(sorted(word))].append(word)\n\n    # An anagram is a child of another anagram if one letter can be added to\n    # the parent anagram to produce the child anagram.\n    graph = defaultdict(list)\n    for anagram in anagrams:\n        for letter in alphabet:\n            child = ''.join(sorted(anagram + letter))\n            if child in anagrams:\n                graph[anagram].append(child)\n\n    @lru_cache(maxsize=None)\n    def get_longest_chain(anagram):\n        if len(graph[anagram]) == 0:\n            return (anagram,)\n        anigrams = [get_longest_chain(child) for child in graph[anagram]]\n        return (anagram,) + max(anigrams, key=len)\n\n    start_anagrams = [anagram for anagram in anagrams if len(anagram) == 4]\n\n    longest_chain = (\n        max(\n            (get_longest_chain(anagram) for anagram in start_anagrams),\n            key=len\n        )\n    )\n\n    print(f\"The longest chain has length {len(longest_chain)}\")\n\n    outstring = \"\"\"\nThere are numerous ways to construct an anigram chain with this length, but\none such chain is given by:\n\"\"\"\n    print(outstring)\n    for anagram in longest_chain:\n        print(\"- \" + anagram)\n\n    print(\"With one possible solution being:\")\n    for anagram in longest_chain:\n        print(\"- \" + anagrams[anagram][0])\n\n    def count_anigram_games():\n        @lru_cache(maxsize=None)\n        def count_anigrams(anagram):\n            if len(anagram) == 10:\n                return 1\n            return sum(count_anigrams(child) for child in graph[anagram])\n\n        ans = (\n            sum(count_anigrams(anagram)\n                for anagram in anagrams if len(anagram) == 4)\n        )\n        return ans\n\n    num_anigram_games = count_anigram_games()\n\n    print(\"\"\"\nExtra credit:\nAssuming a valid anigram game starts with 4 letters and ends with 10 letters:\nthere are {num_anigram_games} distinct anigram games.\n\"\"\".format(num_anigram_games=num_anigram_games)\n)\n\n\nif __name__ == '__main__':\n    main()\n```","srcMarkdownNoYaml":"\n\n\nMy solution to [this week's riddler](https://fivethirtyeight.com/features/can-you-build-the-biggest-anigram/). (See more of [my Riddler solutions here](/riddlers).)\n\n## The Problem\nFrom Michael Branicky comes a word puzzle that is the G.O.A.T.:\n\n> If you like [Wordle](https://www.nytimes.com/games/wordle/index.html), then you might also enjoy [Anigrams](https://anigrams.us/), a game created by Friend-of-the-Riddler™ Adam Wagner.\n>\n>In the game of Anigrams, you unscramble successively larger, nested collections of letters to create a valid “chain” of six English words between four and nine letters in length.\n>\n>For example, a chain of five words (sadly, less than the six needed for a valid game of Anigrams) can be constructed using the following sequence, with each term after the first including one additional letter than the previous term:\n>\n>-   DEIR (which unscrambles to make the words DIRE, IRED or RIDE)\n>-   DEIRD (DRIED or REDID)\n>-   DEIRDL (DIRLED, DREIDL or RIDDLE)\n>-   DEIRDLR (RIDDLER)\n>-   DEIRDLRS (RIDDLERS)\n>\n>What is the longest chain of such nested anagrams you can create, starting with four letters?\n>\n>For specificity, all valid words must come from Peter Norvig’s [word list](https://norvig.com/ngrams/enable1.txt) (a list we’ve used [previously](https://fivethirtyeight.com/features/can-you-solve-the-vexing-vexillology/) here at The Riddler).\n>\n>_Extra credit:_ How many possible games of Anigrams games are there? That is, how many valid sets are there of four initial letters, and then five more letters added one at a time in an ordered sequence, that result in a sequence of valid anagrams? (Note: Swapping the order of the first four letters does not result in a distinct game.)\n\n## The Solution\nIt turns out that the longest such chain of anagrams has length 13. While there are numerous such chains, one possible chain of length 13 is given by:\n\n- aeno\n- aenos\n- aenost\n- aeinost\n- aeimnost\n- aeimnnost\n- aeiimnnost\n- aeiimnnorst\n- aeiimnnorstt\n- adeiimnnorstt\n- adeeiimnnorstt\n- adeeiiimnnorstt\n- adeeiiimnnnorstt\n\nWith one possible solution being:\n\n- aeon\n- aeons\n- atones\n- atonies\n- amniotes\n- nominates\n- antimonies\n- inseminator\n- terminations\n- antimodernist\n- determinations\n- intermediations\n- indeterminations\n\n(Interstingly, every anigram chain of lenth 13 ends in the same 6 words: inseminator, terminations, antimodernist, determinations, intermediations, indeterminations.)\n\n### Extra credit:\n\nAssuming a valid anigram game starts with 4 letters and ends with 10 letters, there are 8,660,949 distinct anigram games.\n\nI wrote up some code to compute my answer which you can see below:\n\n```python\nfrom urllib.request import urlopen\nfrom collections import defaultdict\nfrom functools import lru_cache\n\n\nurl = \"https://norvig.com/ngrams/enable1.txt\"\nfile = urlopen(url)\nwords = [line.decode(\"utf-8\").strip() for line in file]\n\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef main():\n    anagrams = defaultdict(list)\n    for word in words:\n        # Ignore words of length less than 4\n        # (short words are not used in this problem)\n        if len(word) >= 4:\n            anagrams[''.join(sorted(word))].append(word)\n\n    # An anagram is a child of another anagram if one letter can be added to\n    # the parent anagram to produce the child anagram.\n    graph = defaultdict(list)\n    for anagram in anagrams:\n        for letter in alphabet:\n            child = ''.join(sorted(anagram + letter))\n            if child in anagrams:\n                graph[anagram].append(child)\n\n    @lru_cache(maxsize=None)\n    def get_longest_chain(anagram):\n        if len(graph[anagram]) == 0:\n            return (anagram,)\n        anigrams = [get_longest_chain(child) for child in graph[anagram]]\n        return (anagram,) + max(anigrams, key=len)\n\n    start_anagrams = [anagram for anagram in anagrams if len(anagram) == 4]\n\n    longest_chain = (\n        max(\n            (get_longest_chain(anagram) for anagram in start_anagrams),\n            key=len\n        )\n    )\n\n    print(f\"The longest chain has length {len(longest_chain)}\")\n\n    outstring = \"\"\"\nThere are numerous ways to construct an anigram chain with this length, but\none such chain is given by:\n\"\"\"\n    print(outstring)\n    for anagram in longest_chain:\n        print(\"- \" + anagram)\n\n    print(\"With one possible solution being:\")\n    for anagram in longest_chain:\n        print(\"- \" + anagrams[anagram][0])\n\n    def count_anigram_games():\n        @lru_cache(maxsize=None)\n        def count_anigrams(anagram):\n            if len(anagram) == 10:\n                return 1\n            return sum(count_anigrams(child) for child in graph[anagram])\n\n        ans = (\n            sum(count_anigrams(anagram)\n                for anagram in anagrams if len(anagram) == 4)\n        )\n        return ans\n\n    num_anigram_games = count_anigram_games()\n\n    print(\"\"\"\nExtra credit:\nAssuming a valid anigram game starts with 4 letters and ends with 10 letters:\nthere are {num_anigram_games} distinct anigram games.\n\"\"\".format(num_anigram_games=num_anigram_games)\n)\n\n\nif __name__ == '__main__':\n    main()\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"css":["../../styles.css"],"output-file":"2022-09-16-riddler-anigrams.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"flatly","title":"Riddler: Anigrams","date":"2022-09-16","description":"A probability puzzle involving rare letter permutations.","author":"Mark Girard","categories":["riddler","puzzles"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}